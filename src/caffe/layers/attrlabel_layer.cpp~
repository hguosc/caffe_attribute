#include <algorithm>
#include <vector>

#include "caffe/layers/attrlabel_layer.hpp"
#include "caffe/util/math_functions.hpp"

namespace caffe {

template <typename Dtype>
void AttrLabelLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,
      const vector<Blob<Dtype>*>& top) {
  CHECK_EQ(bottom.size(), 2) << "There must be 2 bottoms";
  CHECK_EQ(bottom[0]->count(), bottom[1]->count()) << "Different bottom size";
}

template <typename Dtype>
void AttrLabelLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,
      const vector<Blob<Dtype>*>& top) {
  top[0]->ReshapeLike(*bottom[0]);
}

template <typename Dtype>
void AttrLabelLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,
      const vector<Blob<Dtype>*>& top) {
  const int count = bottom[0]->count();
  Dtype * top_data = top[0]->mutable_cpu_data();
  const Dtype * bottom1_data = bottom[0]->cpu_data();
  const Dtype * bottom2_data = bottom[1]->cpu_data();
  for (int i = 0 ; i < count ; ++i)
  {
    // if (bottom1_data[i] == bottom2_data[i])
    // {
    //   if (bottom1_data[i] == Dtype(-1))
    //   {
    //     top_data[i] = Dtype(-1);
    //   }
    //   else
    //   {
    //     top_data[i] = Dtype(1);
    //   }
    // }
    // else
    // {
    //   if (bottom1_data[i] == Dtype(-1) || bottom2_data[i] == Dtype(-1))
    //   {
    //     top_data[i] = Dtype(-1);
    //   }
    //   else
    //   {
    //     top_data[i] = Dtype(0);
    //   }
    // } 
    /*if (bottom1_data[i] == Dtype(-1) || bottom2_data[i] == Dtype(-1))
    {
      top_data[i] = Dtype(0);
    }  
    else
    {
      if (bottom1_data[i] == bottom2_data[i])
      {
        top_data[i] = Dtype(1);
      }
      else
      {
        top_data[i] = Dtype(0);
      }
    }*/
    if (bottom1_data[i] == bottom2_data[i])
    {
      top_data[i] = Dtype(1);
    }
    else
    {
      if ((bottom1_data[i] == Dtype(-1) && bottom2_data[i] = Dtype(0)) || (bottom1_data[i] == Dtype(0) && bottom2_data[i] = Dtype(-1)))
        top_data[i] = Dtype(1);
      else
        top_data[i] = Dtype(0);
    }
  }
}

template <typename Dtype>
void AttrLabelLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,
      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
  
}

#ifdef CPU_ONLY
STUB_GPU(AttrLabelLayer);
#endif

INSTANTIATE_CLASS(AttrLabelLayer);
REGISTER_LAYER_CLASS(AttrLabel);

}  // namespace caffe
